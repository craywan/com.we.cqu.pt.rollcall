<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

  <!-- 扫描service包下所有使用注解的类型 -->
  <context:component-scan base-package="edu.uddp.service"/>
  <!-- 配置数据库相关参数properties的属性：${url} -->
  <context:property-placeholder location="classpath:properties/jdbc.properties" ignore-unresolvable="true"/>
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <!-- 基本属性 url、user、password -->
    <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    <property name="url" value="jdbc:mysql://172.20.2.210:3306/wecqupt_wzw?characterEncoding=utf-8"/>
    <property name="username" value="liu"/>
    <property name="password" value="DM@0cqupt.lanshan"/>

    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="1"/>
    <property name="minIdle" value="1"/>
    <property name="maxActive" value="20"/>

    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="60000"/>

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000"/>

    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="300000"/>

    <property name="validationQuery" value="SELECT 'x'"/>
    <property name="testWhileIdle" value="true"/>
    <property name="testOnBorrow" value="false"/>
    <property name="testOnReturn" value="false"/>

    <!-- 打开PSCache，并且指定每个连接上PSCache的大小,分库分表较多的数据库，建议配置为false-->
    <property name="poolPreparedStatements" value="true"/>
    <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

    <!-- 配置监控统计拦截的filters -->
    <property name="filters" value="stat"/>
  </bean>

  <!-- 配置SqlSessionFactory对象 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 注入数据库连接池 -->
    <property name="dataSource" ref="dataSource"/>
    <!-- 扫描entity包 使用别名 -->
    <property name="typeAliasesPackage" value="edu.uddp.model"/>
    <!-- 扫描sql配置文件:mapper需要的xml文件 -->
    <property name="mapperLocations" value="classpath:/mybatis/mapper/*.xml"/>
    <!-- 加载mybatis的全局配置文件 -->
    <property name="configLocation" value="classpath:mybatis/mybatisConfig.xml" />
  </bean>

  <!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 注入sqlSessionFactory -->
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <!-- 给出需要扫描Dao接口包 -->
    <property name="basePackage" value="edu.uddp.mapper"/>
  </bean>

  <!--redis-->
  <!-- 读取properties文件 -->
  <!--<context:property-placeholder location="classpath:properties/redis.properties" ignore-unresolvable="true"/>-->
  <!--&lt;!&ndash; jedis 连接池配置 &ndash;&gt;-->
  <!--<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
    <!--<property name="maxIdle" value="500"/>-->
    <!--<property name="minIdle" value="0"/>-->
    <!--<property name="maxWaitMillis" value="10000"/>-->
    <!--<property name="testOnBorrow" value="true"/>-->
    <!--<property name="testOnReturn" value="true" />-->
  <!--</bean>-->
  <!--&lt;!&ndash; redis连接工厂 &ndash;&gt;-->
  <!--<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--<property name="poolConfig" ref="poolConfig"/>-->
    <!--<property name="port" value="7379"/>-->
    <!--<property name="hostName" value="127.0.0.1"/>-->
    <!--<property name="timeout" value="100000"/>-->
  <!--</bean>-->
  <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
    <!--<property name="connectionFactory" ref="connectionFactory"/>-->
    <!--<property name="keySerializer">-->
      <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
    <!--</property>-->
    <!--<property name="valueSerializer">-->
      <!--<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
    <!--</property>-->
    <!--<property name="enableTransactionSupport" value="true"></property>-->
  <!--</bean>-->
  <!-- 缓存拦截器配置 -->
  <!--<bean id="methodCacheInterceptor" class="edu.uddp.interceptor.MethodCacheInterceptor">-->
    <!--<property name="redisUtil" ref="redisUtil"/>-->
    <!--<property name="defaultCacheExpireTime" value="3600"/>-->
    <!--&lt;!&ndash; 禁用缓存的类名列表 &ndash;&gt;-->
    <!--<property name="targetNamesList">-->
      <!--<list>-->
        <!--<value></value>-->
      <!--</list>-->
    <!--</property>-->
    <!--&lt;!&ndash; 禁用缓存的方法名列表 &ndash;&gt;-->
    <!--<property name="methodNamesList">-->
      <!--<list>-->
        <!--<value></value>-->
      <!--</list>-->
    <!--</property>-->
  <!--</bean>-->
  <!--<bean id="redisUtil" class="edu.uddp.util.RedisUtil">-->
    <!--<property name="redisTemplate" ref="redisTemplate"/>-->
  <!--</bean>-->
  <!--&lt;!&ndash;配置切面拦截方法 &ndash;&gt;-->
  <!--<aop:config proxy-target-class="true">-->
    <!--&lt;!&ndash;将包下的所有select开头的方法加入拦截去掉select则加入所有方法&ndash;&gt;-->
    <!--<aop:pointcut id="controllerMethodPointcut" expression="execution(* edu.uddp.service.*.select*(..))"/>-->
    <!--<aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>-->
  <!--</aop:config>-->


  <!-- 引用ehCache 的配置-->
  <!--<cache:annotation-driven cache-manager = "springCacheManager"/>-->

  <!-- 要先开启缓存 -->
  <!--<context:component-scan base-package = "edu.uddp.service"></context:component-scan>-->


  <!--<bean id="cacheManager"-->
        <!--class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
    <!--<property name="configLocation">-->
      <!--<value>classpath:spring/encache.xml</value>-->
    <!--</property>-->
  <!--</bean>-->

  <!--&lt;!&ndash; 定义ehCache 的工厂，并设置所使用的Cache name &ndash;&gt;-->
  <!--<bean id="simpleCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">-->
    <!--<property name="cacheManager" ref="cacheManager" />-->
    <!--&lt;!&ndash; 使用缓存 关联ehcache.xml中的缓存配置 &ndash;&gt;-->
    <!--<property name="cacheName" >-->
      <!--<value>mobileCache</value>-->
    <!--</property>-->
  <!--</bean>-->

  <!--&lt;!&ndash; find/create cache 拦截器&ndash;&gt;-->
  <!--<bean id="MethodEhCacheInterceptor" class="edu.uddp.interceptor.MethodEhCacheInterceptor">-->
    <!--<property name="cache" ref="simpleCache"/>-->
  <!--</bean>-->

  <!--&lt;!&ndash; flush cache 拦截器&ndash;&gt;-->
  <!--<bean id="methodCacheAfterAdvice" class="com.microcampus.ehcache.interceptor.MethodCacheAfterAdvice">-->
  <!--<property name="cache" ref="simpleCache"/>-->
  <!--</bean>-->

  <!-- 参与缓存的切入点对象 (切入点对象，确定何时何地调用拦截器) -->
  <!--<bean id="methodCachePointCut"-->
        <!--class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">-->
    <!--&lt;!&ndash; 配置缓存aop切面 &ndash;&gt;-->
    <!--<property name="advice" ref="MethodEhCacheInterceptor" />-->
    <!--&lt;!&ndash; 配置哪些方法参与缓存策略 .表示符合任何单一字元 ### +表示符合前一个字元一次或多次 ### *表示符合前一个字元零次或多次 ###-->
        <!--\Escape任何Regular expression使用到的符号 .*表示前面的前缀(包括包名) 表示print方法 &ndash;&gt;-->
    <!--&lt;!&ndash; 下面的配置就使得在数据访问时，cache将拦截从数据库获取的数据，与cache数据比较，如有就不放入cache，没有就放入，更新到数据库去，也是先存入cache，再更新到数据库中去 &ndash;&gt;-->
    <!--<property name="patterns">-->
      <!--<list>-->
        <!--&lt;!&ndash; <value>com.microcampus.ehcache.rest.*RestService*\.*get.*</value>-->
            <!--<value>com.microcampus.ehcache.rest.*RestService*\.*search.*</value> &ndash;&gt;-->
        <!--<value>.*select.*</value>-->
        <!--<value>.*get.*</value>-->
      <!--</list>-->
    <!--</property>-->
  <!--</bean>-->

  <!--<bean id="springCacheManager"/>-->

  <!--&lt;!&ndash;<bean id="methodCachePointCutAdvice"&ndash;&gt;-->
  <!--&lt;!&ndash;class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">&ndash;&gt;-->
  <!--&lt;!&ndash;<property name="advice" ref="methodCacheAfterAdvice" />&ndash;&gt;-->
  <!--&lt;!&ndash;<property name="patterns">&ndash;&gt;-->
  <!--&lt;!&ndash;<list>&ndash;&gt;-->
  <!--&lt;!&ndash;<value>.*create.*</value>&ndash;&gt;-->
  <!--&lt;!&ndash;<value>.*update.*</value>&ndash;&gt;-->
  <!--&lt;!&ndash;<value>.*delete.*</value>&ndash;&gt;-->
  <!--&lt;!&ndash;</list>&ndash;&gt;-->
  <!--&lt;!&ndash;</property>&ndash;&gt;-->
  <!--&lt;!&ndash;</bean>&ndash;&gt;-->

  <!--&lt;!&ndash; <bean id="personManager" class="org.springframework.aop.framework.ProxyFactoryBean">-->
      <!--<property name="target" value="personManagerTarget" />-->
      <!--<property name="interceptorNames">-->
          <!--<list>-->
              <!--<value>methodCachePointCut</value>-->
          <!--</list>-->
      <!--</property>-->
  <!--</bean>&ndash;&gt;-->

</beans>